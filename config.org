#+TODO: ASSESS(a) TRIAL(t) | ADOPT(d) DEPRECATED(k@)
#+title: Emacs configuration

* About me
#+begin_src emacs-lisp
(setq user-full-name "Yejun Su"
      user-mail-address "yejun@hey.com")
#+end_src

* Appearance
** Theme
#+begin_src emacs-lisp
(if (display-graphic-p)
    (setq doom-theme 'modus-operandi)
  (setq doom-theme 'modus-vivendi))
#+end_src

#+begin_src emacs-lisp
(use-package! modus-themes
  :config
  (setq modus-themes-completions
        '((matches . (extrabold underline))
          (selection . (semibold italic))))
  (setq modus-themes-headings
        '((1 . (variable-pitch 1.2))
          (2 . (variable-pitch 1.1))
          (3 . (variable-pitch 1.05))
          (4 . (1.0))
          (agenda-date . (1.2))
          (agenda-structure . (variable-pitch light 1.6))
          (t . (1.1)))))
#+end_src

** Font
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "JetBrains Mono" :size 16)
      doom-variable-pitch-font (font-spec :family "Iosevka" :size 16))
#+end_src

* Organize my life
** Org Mode
#+begin_src emacs-lisp
(setq org-directory "~/Documents/org/")
#+end_src

#+begin_src emacs-lisp
(after! org
  (setq org-log-into-drawer t)
  (setq org-log-done 'time)
  (setq org-todo-keywords
        '((sequence "TODO(t)" "HOLD(h@/!)" "|" "DONE(d!)" "KILL(k@)")))
  (setq org-todo-keyword-faces
        '(("KILL" . (:inherit (italic +org-todo-cancel)))
          ("DEPRECATED" . (:inherit (italic +org-todo-cancel)))))

  (setq org-capture-templates
        '(("t" "Tasks" entry (file +org-capture-todo-file) "* TODO %?\n%i\n%a" :prepend t)
          ("j" "Journal" entry (file+olp+datetree +org-capture-journal-file) "* %U %?\n%i\n%a")
          ("n" "Notes" entry  (file "roam/inbox.org") "* %?\n%i\n")))

  ;; https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html
  (defun air-org-skip-subtree-if-priority (priority)
    "Skip an agenda subtree if it has a priority of PRIORITY.
PRIORITY may be one of the characters ?A, ?B, or ?C."
    (let ((subtree-end (save-excursion (org-end-of-subtree t)))
          (pri-value (* 1000 (- org-lowest-priority priority)))
          (pri-current (org-get-priority (thing-at-point 'line t))))
      (if (= pri-value pri-current)
          subtree-end
        nil)))
  (defun air-org-skip-subtree-if-habit ()
    "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (if (string= (org-entry-get nil "STYLE") "habit")
          subtree-end
        nil)))
  (setq org-agenda-custom-commands
        '(("d" "My daily agenda"
           ((tags "PRIORITY=\"A\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "High-priority unfinished tasks:")))
            (agenda "" ((org-agenda-span 1)
                        (org-agenda-start-day "+0d")))
            (alltodo ""
                     ((org-agenda-overriding-header "ALL normal priority tasks:")
                      (org-agenda-skip-function '(or (air-org-skip-subtree-if-habit)
                                                     (air-org-skip-subtree-if-priority ?A)
                                                     (org-agenda-skip-if nil '(scheduled deadline)))))))))))

(defun org-capture-notes ()
  (interactive)
  (org-capture nil "n"))
(defun org-goto-notes ()
  (interactive)
  (find-file "~/Documents/org/roam/inbox.org"))
(map! :leader
      "nn" #'org-capture-notes
      "nN" #'org-goto-notes)
#+end_src

** Taking smart notes
*** Org-roam
#+begin_src emacs-lisp
(after! org-roam
  (setq org-roam-capture-templates
        '(("m" "main" plain "%?"
           :if-new (file+head "main/${title}.org" "#+title: ${title}\n")
           :immediate-finish t
           :unnarrowed t)
          ("r" "reference" plain "%?"
           :if-new (file+head "reference/${title}.org" "#+title: ${title}\n")
           :immediate-finish t
           :unnarrowed t)
          ("p" "project" plain "%?"
           :if-new (file+head "project/${title}.org" "#+title: ${title}\n")
           :immediate-finish t
           :unnarrowed t)
          ("a" "articles" plain "%?"
           :if-new (file+head "articles/${title}.org" "#+title: ${title}\n#+filetags: :article:\n")
           :immediate-finish t
           :unnarrowed t)))

  (cl-defmethod org-roam-node-type ((node org-roam-node))
    "Return the TYPE of NODE."
    (condition-case nil
        (file-name-nondirectory
         (directory-file-name
          (file-name-directory
           (file-relative-name (org-roam-node-file node) org-roam-directory))))
      (error "")))
  (setq org-roam-node-display-template
        (concat "${type:15} ${title:*} " (propertize "${tags:60}" 'face 'org-tag)))

  (defun tag-new-org-roam-node-as-draft ()
    (org-roam-tag-add '("draft")))
  (add-hook 'org-roam-capture-new-node-hook #'tag-new-org-roam-node-as-draft)

  (map! :leader
        "nF" #'org-roam-node-find))
#+end_src

*** Citation management
#+begin_src emacs-lisp
(after! oc
  (setq org-cite-global-bibliography '("~/Documents/org/roam/biblio.bib")))
#+end_src

#+begin_src emacs-lisp
(use-package! citar
  :after oc
  :custom
  (citar-bibliography '("~/Documents/org/roam/biblio.bib"))
  (citar-notes-paths '("~/Documents/org/roam/reference/"))
  :config
  (map! :leader
        :desc "Bibliographic files" "nB" #'citar-open))
#+end_src

** Import documents to Org Mode
#+begin_src emacs-lisp
(use-package! org-pandoc-import
  :after org)
#+end_src

* Coding
** Don't check syntax when editing
#+begin_src emacs-lisp
(after! flycheck
  (delq 'idle-change flycheck-check-syntax-automatically))
#+end_src

* Languages
** Elixir
#+begin_src emacs-lisp
(use-package! elixir-mode
  :hook (before-save . elixir-format-before-save)
  :config
  (defun elixir-format-before-save ()
    (when (derived-mode-p 'elixir-mode)
      (eglot-format-buffer))))
#+end_src

** Nix
#+begin_src emacs-lisp
(use-package! nix-mode
  :hook (before-save . nix-format-before-save))
#+end_src

* Tools
** Forge
#+begin_src emacs-lisp
(use-package! forge
  :config
  (setq forge-topic-list-limit '(20 . 5)))
#+end_src

** Github
*** CLI
https://cli.github.com/manual/

#+begin_src emacs-lisp
(defun yejun/gh-pr-create ()
  (interactive)
  (shell-command "gh pr create -w"))

(defun yejun/gh-pr-view ()
  (interactive)
  (shell-command "gh pr view -w"))
#+end_src

*** Gist
https://gist.github.com/

#+begin_src emacs-lisp
(defun yejun/gist-region-or-buffer (&optional p)
  (interactive "P")
  (let ((filename (buffer-name))
        (output-buffer " *gist-output*")
        (public (if p " --public" "")))
    (shell-command-on-region
     (if (use-region-p) (region-beginning) (point-min))
     (if (use-region-p) (region-end) (point-max))
     (concat "gh gist create --filename " filename public " -")
     output-buffer)
    (with-current-buffer output-buffer
      (goto-char (point-max))
      (forward-line -1)
      (kill-new (thing-at-point 'line)))
    (kill-buffer output-buffer)))

(map! :leader
      :desc "Gist buffer/region"  "cg" #'yejun/gist-region-or-buffer)
#+end_src

** SourceHut
*** Paste
https://paste.sr.ht

#+begin_src emacs-lisp
(defun yejun/paste-region-or-buffer (&optional p)
  (interactive "P")
  (let ((filename (read-string "Enter filename: " (buffer-name)))
        (output-buffer " *paste-output*")
        (public (if p " --visibility public" "")))
    (shell-command-on-region
     (if (use-region-p) (region-beginning) (point-min))
     (if (use-region-p) (region-end) (point-max))
     (concat "hut paste create --name \"" filename "\"" public)
     output-buffer)
    (with-current-buffer output-buffer
      (goto-char (point-max))
      (forward-line -1)
      (kill-new (thing-at-point 'line)))
    (kill-buffer output-buffer)))

(map! :leader
      :desc "Paste buffer/region" "cp" #'yejun/paste-region-or-buffer)
#+end_src

** ChatGPT
#+begin_src emacs-lisp
(use-package! chatgpt-shell
  :custom
  (chatgpt-shell-model-version 2)
  (chatgpt-shell-welcome-function nil)
  (chatgpt-shell-openai-key (lambda () (auth-source-pick-first-password :host "api.openai.com")))
  :config
  (set-popup-rules!
    '(("^\\*chatgpt\\*" :side bottom :size 0.5 :select t)
      ("^ChatGPT>" :side bottom :size 0.5 :select t)))
  (map! :leader
        :prefix ("z" . "chatgpt-shell")
        "z" #'chatgpt-shell
        "b" #'chatgpt-shell-prompt
        "c" #'chatgpt-shell-prompt-compose
        "s" #'chatgpt-shell-send-region
        "S" #'chatgpt-shell-send-and-review-region
        "e" #'chatgpt-shell-explain-code
        "r" #'chatgpt-shell-refactor-code))
#+end_src

** Dash.app
#+begin_src emacs-lisp
(use-package! dash-at-point
  :config
  (map! :leader
        "sk" #'dash-at-point
        "sK" #'dash-at-point-with-docset))
#+end_src

** DEPRECATED IRC client
CLOSED: [2023-09-07 Thu 11:29]
:LOGBOOK:
- State "DEPRECATED" from              [2023-09-07 Thu 11:27] \\
  Use https://chat.sr.ht/ instead.
:END:

#+begin_src emacs-lisp :tangle no
(set-irc-server! "Libera Chat"
  '(:host "irc.libera.chat"
    :port 6697
    :nick "goofansu"
    :channels ("#emacs" "#elixir")
    :nickserv-password (lambda (server) (auth-source-pick-first-password :host server))))

(global-set-key (kbd "s-k") #'+irc/jump-to-channel)
#+end_src

** Pass
https://www.passwordstore.org/

#+begin_src emacs-lisp
(use-package! password-store
  :config
  (map! :leader
        (:prefix-map ("o p" . "pass")
         :desc "Copy password"         "p" #'password-store-copy
         :desc "Copy selected field"   "f" #'password-store-copy-field
         :desc "Copy OTP token"        "y" #'password-store-otp-token-copy
         :desc "Insert password"       "i" #'password-store-insert
         :desc "Insert OTP"            "I" #'password-store-otp-insert
         :desc "Edit password"         "e" #'password-store-edit
         :desc "Rename password entry" "r" #'password-store-rename
         :desc "Remove password entry" "R" #'password-store-remove
         :desc "Append OTP"            "a" #'password-store-otp-append
         :desc "Append OTP from image" "A" #'password-store-otp-append-from-image)))
#+end_src

** GPG
#+begin_src emacs-lisp
(defun yejun/decrypt-pgp-file ()
  (interactive)
  (let* ((current-file (buffer-file-name))
         (plain-file (concat current-file ".txt")))
    (epa-decrypt-file current-file plain-file)
    (find-file plain-file)))

(map! :leader
      :desc "Decrypt PGP file" "fm" #'yejun/decrypt-pgp-file)
#+end_src

** TRIAL Open Source Map
#+begin_src emacs-lisp
(use-package! osm
  :config
  (require 'osm-ol)
  :custom
  (osm-server 'default)
  (osm-copyright t)
  :bind ("C-c m" . osm-prefix-map)
  :hook (osm-mode . evil-emacs-state))
#+end_src

** Magit
*** Add an option to send skip-ci in magit-push
#+begin_src emacs-lisp
(after! magit
  (transient-append-suffix 'magit-push "-n"
    '("-s" "Skip CI" "--push-option=skip-ci")))
#+end_src

** Mail
*** Set backend of message-send
#+begin_src emacs-lisp
(setq send-mail-function 'sendmail-send-it)
#+end_src

* Projects
** Vanilla Emacs
I'm building my own Emacs configuration [[https://github.com/goofansu/.emacs.d][here]].

#+begin_src emacs-lisp
(defun yejun/launch-vanilla-emacs ()
  (interactive)
  (let ((default-directory "~/src/.emacs.d/"))
    (start-process "Emacs" nil "emacs" "-q" "-l" "init.el" "config.org")))

(global-set-key (kbd "C-c e") #'yejun/launch-vanilla-emacs)
#+end_src

** Blog
#+begin_src emacs-lisp
(map! :leader
      "fo" #'yejun/find-file-in-blog)

(defun yejun/find-file-in-blog ()
  (interactive)
  (doom-project-find-file "~/src/yejun.dev"))
#+end_src

** Mastodon
#+begin_src emacs-lisp
(use-package! mastodon
  :custom
  (mastodon-instance-url "https://hachyderm.io")
  (mastodon-active-user "goofansu"))
#+end_src
